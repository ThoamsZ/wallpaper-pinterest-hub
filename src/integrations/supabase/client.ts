
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://begjbzrzxmbwsrniirao.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJlZ2pienJ6eG1id3NybmlpcmFvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzg1OTUzODgsImV4cCI6MjA1NDE3MTM4OH0.M12TudEZqwnImyu1EvQ0Ha-s3fsHafx9ZxWsD8FCc98";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Helper function for checking if a table exists
export const checkTableExists = async (tableName: string): Promise<boolean> => {
  try {
    // Use the information_schema to check if the table exists
    // This is more reliable than trying to query the table directly
    const { data, error } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_schema', 'public')
      .eq('table_name', tableName)
      .maybeSingle();
    
    if (error) {
      console.error(`Error checking if table ${tableName} exists using information_schema:`, error);
      
      // Fallback to the original method if information_schema query fails
      try {
        const { error: fallbackError } = await supabase
          .from(tableName)
          .select('*')
          .limit(1);
        
        if (fallbackError) {
          if (fallbackError.code === '42P01' || 
              fallbackError.message.includes('relation') || 
              fallbackError.message.includes('does not exist')) {
            console.log(`Table ${tableName} does not exist (fallback check)`);
            return false;
          }
          console.error(`Fallback error checking if table ${tableName} exists:`, fallbackError);
          return false;
        }
        
        return true;
      } catch (fallbackException: any) {
        console.error(`Fallback exception checking if table ${tableName} exists:`, fallbackException);
        return false;
      }
    }
    
    // If we get data from the information_schema query, the table exists
    return data !== null;
  } catch (error: any) {
    // Log the error but don't throw it
    console.error(`Exception checking if table ${tableName} exists:`, error);
    return false;
  }
};
